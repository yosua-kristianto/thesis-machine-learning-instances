#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

#r "nuget: Newtonsoft.Json, 13.0.3"

#!fsharp

open System;
open System.IO;
open Newtonsoft.Json;
open System.Linq;
open System.Net.Http;

#!markdown

# Environment Variable

#!fsharp

type RegisteredKeys = {
    TELEGRAM_BOT_ID: string
    CHAT_ID: int64
    YOLO_ANNOTATION_FOLDER_OUTPUT: string
    MSCOCO_ANNOTATION_FOLDER_INPUT: string
};

let EnvironmentVariable : RegisteredKeys =
    let envPath: string = "../../config.json";
    
    let environmentVariableJsonFile = File.ReadAllText(envPath);

    let configurationValue: RegisteredKeys = JsonConvert.DeserializeObject<RegisteredKeys>(environmentVariableJsonFile);

    configurationValue;



    

type TelegramRequestDTO = { 
    text: string 
    chat_id: int64
}

let telegramService (message: string) =
    
    // Request manipulation

    let currentDateTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
    let requestMessage = "["+currentDateTime+"] "+message;
    let request: TelegramRequestDTO = { text = requestMessage; chat_id = EnvironmentVariable.CHAT_ID; };


    use httpRequest = new HttpClient();
    let json = JsonConvert.SerializeObject request;
    use content = new StringContent (json, Encoding.UTF8, "application/json")

    async {
        let! response = httpRequest.PostAsync("https://api.telegram.org/bot"+EnvironmentVariable.TELEGRAM_BOT_ID+"/sendMessage", content) |> Async.AwaitTask
        response;
    } |> Async.RunSynchronously;

#!markdown

# Information extraction

### 2023-01-30 16:11
From what I know about the COCO thingy, it contains several informations below:

1. images
2. annotations
3. categories

For next 2 hours, just try to get these values aboves

#!markdown

# Model Part

#!fsharp

type Category = {
    id: int
    name: string
};

type Image = {
    id: int
    width: int
    height: int
    file_name: string
    doc_name: string
    page_no: int
};

type Annotation = {
    id: int
    image_id: int
    category_id: int
    bbox: float array
};

type CocoJson = {
    categories: Category array
    images: Image array
    annotations: Annotation array
};

#!markdown

# Deserialize the COCO file

#!fsharp

let filesInDirectory = Directory.GetFiles(EnvironmentVariable.MSCOCO_ANNOTATION_FOLDER_INPUT);

let mutable jsonContent: CocoJson array = [||];

for i in filesInDirectory do
    let jsonString = File.ReadAllText(i);
    let importedData: CocoJson = JsonConvert.DeserializeObject<CocoJson>(jsonString);
    jsonContent <- Array.append jsonContent [| importedData |];

jsonContent.Length;

#!markdown

# Data ETL

1. Transform the data within categories by extracting all the data within `jsonContent.categories`, and write a file to the Preprocessing/output directory as "categories file" with rules of, every categories id must be substract by 1.

2. Make a LinQ array searching method to search image by id.

3. For

#!fsharp

// Categories Extractor

let mutable categoriesExtrationResult: string = "";

for i in jsonContent.[0].categories do
    categoriesExtrationResult <- (categoriesExtrationResult + (i.id - 1).ToString() + " " + i.name + "\n");

use stream = new StreamWriter ("../Output/extracted-categories.txt", false);
stream.WriteLine(categoriesExtrationResult);

stream.Close();

#!markdown

# Query Repository

#!fsharp

// Image searcher repository

let FindImageById (source: int) (imageId: int): Image = 
    let resultSet = jsonContent.[source].images |> Array.filter(fun x -> x.id = imageId);

    resultSet[0];

let FindAnnotationById (source: int) (annotationId: int): Annotation = 
    let resultSet = jsonContent.[source].annotations |> Array.filter(fun x -> x.id = annotationId);

    resultSet[0];

#!fsharp

let outputFolderPath = EnvironmentVariable.YOLO_ANNOTATION_FOLDER_OUTPUT;

let RemoveExtensionFromFileName (filename: string) =
    let reversedString = (filename.ToCharArray()) |> Array.rev;
    let indexOfDot = String(reversedString).IndexOf(".");
    let substringBackSlash = reversedString.[(indexOfDot - 1) .. reversedString.Length];
    String((substringBackSlash) |> Array.rev);

telegramService "Starting generating Yolo Output from MSCOCO";

for src in 0 .. (jsonContent.Length - 1) do
    for i in jsonContent[src].annotations do
        let image = FindImageById src i.image_id;

        let annotationString = (i.category_id - 1).ToString() 
                                        + " " 
                                        + i.bbox[0].ToString() 
                                        + " " 
                                        + i.bbox[1].ToString() 
                                        + " " 
                                        + i.bbox[2].ToString() 
                                        + " " 
                                        + i.bbox[3].ToString();

        use stream = new StreamWriter ((outputFolderPath + RemoveExtensionFromFileName(image.file_name) + ".txt"), false);
        stream.WriteLine(annotationString);

        stream.Close();

telegramService "Done generating Yolo Output from MSCOCO";
